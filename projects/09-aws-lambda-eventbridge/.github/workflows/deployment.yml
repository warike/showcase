name: CI - Mastra workflow

on:
  push:
    branches: [main, master]
    paths:
      - 'workflow/**'      
      - '.github/workflows/**'
  pull_request:
    branches: [main, master]
    paths:
      - 'workflow/**'
      - '.github/workflows/**'
env:
  NODE_VERSION: 22
  PNPM_VERSION: 10
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
  AWS_ROLE_ARN: ${{ secrets.AWS_IAM_ROLE_ARN }}
  AWS_LAMBDA_FUNCTION_NAME: ${{ secrets.AWS_LAMBDA_FUNCTION_NAME }}
  AWS_LAMBDA_FUNCTION_ROLE_ARN: ${{ secrets.AWS_LAMBDA_FUNCTION_ROLE_ARN }}

jobs:
  tests:
    name: Test workflow
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./workflow
    
    strategy:
      matrix:
        node-version: [22]
        pnpm-version: [10]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ matrix.pnpm-version }}
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: workflow/pnpm-lock.yaml
      
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
  
      - name: Scan for critical vulnerabilities
        run: pnpm audit --audit-level=critical
  
      - name: Run Tests
        env:
          DOTENV_QUIET: true
          GOOGLE_GENERATIVE_AI_API_KEY: "example-api-key"
        run: pnpm test:ci
  build:      
    name: Build workflow
    needs: tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./workflow
    
    strategy:
      matrix:
        node-version: [22]
        pnpm-version: [10]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ matrix.pnpm-version }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: workflow/pnpm-lock.yaml
          
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build
        working-directory: ./workflow
        run: pnpm run build
  build-docker:
    name: Build Docker image
    needs: build
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.vars.outputs.sha }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
      
      - name: Set commit-sha
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "sha=${calculatedSha}" >> $GITHUB_OUTPUT
          
      - name: Build image and push to ECR
        working-directory: ./workflow
        env:
          DOCKER_IMAGE: ${{env.ECR_REPOSITORY}}:${{steps.vars.outputs.sha}}
        run: |
          echo "Building ${{env.DOCKER_IMAGE}}"
          docker build -t ${{env.DOCKER_IMAGE}} .
          docker tag "${{env.DOCKER_IMAGE}}" "${{env.ECR_REPOSITORY}}:latest"
          docker push ${{env.DOCKER_IMAGE}}
          docker push "${{env.ECR_REPOSITORY}}:latest"
  deploy-lambda:
    name: Deploy workflow
    runs-on: ubuntu-latest
    needs: build-docker
    permissions:
      id-token: write
      contents: read
    
    defaults:
      run:
        working-directory: ./workflow
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Lambda Function
        uses: aws-actions/aws-lambda-deploy@v1.1.0
        with:
          function-name: ${{ env.AWS_LAMBDA_FUNCTION_NAME }}
          package-type: Image
          image-uri: ${{ env.ECR_REPOSITORY }}:${{ needs.build-docker.outputs.sha }}
          role:  ${{ env.AWS_LAMBDA_FUNCTION_ROLE_ARN }}